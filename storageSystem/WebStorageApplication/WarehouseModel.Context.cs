//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebStorageApplication
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class WarehouseTEntities : DbContext
    {
        public WarehouseTEntities()
            : base("name=WarehouseTEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<DeliveryMethod> DeliveryMethods { get; set; }
        public virtual DbSet<Order> Orders { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProductType> ProductTypes { get; set; }
    
        public virtual int addOrder(string nameProduct, string method, string address, Nullable<int> quantity, Nullable<long> code)
        {
            var nameProductParameter = nameProduct != null ?
                new ObjectParameter("nameProduct", nameProduct) :
                new ObjectParameter("nameProduct", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("method", method) :
                new ObjectParameter("method", typeof(string));
    
            var addressParameter = address != null ?
                new ObjectParameter("address", address) :
                new ObjectParameter("address", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("addOrder", nameProductParameter, methodParameter, addressParameter, quantityParameter, codeParameter);
        }
    
        public virtual int deleteAllUnsolicitedProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("deleteAllUnsolicitedProducts");
        }
    
        public virtual ObjectResult<deleteUnsolicitedProducts_Result> deleteUnsolicitedProducts(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<deleteUnsolicitedProducts_Result>("deleteUnsolicitedProducts", idParameter);
        }
    
        public virtual int editProducts(Nullable<int> id, Nullable<long> code, string name, Nullable<System.DateTime> quarantee, string type, Nullable<int> quantity)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var quaranteeParameter = quarantee.HasValue ?
                new ObjectParameter("quarantee", quarantee) :
                new ObjectParameter("quarantee", typeof(System.DateTime));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("editProducts", idParameter, codeParameter, nameParameter, quaranteeParameter, typeParameter, quantityParameter);
        }
    
        public virtual ObjectResult<getAvailableProducts_Result> getAvailableProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getAvailableProducts_Result>("getAvailableProducts");
        }
    
        public virtual int insertWare(Nullable<long> code, string name, Nullable<System.DateTime> guaranteeDate, Nullable<int> quantity, string type)
        {
            var codeParameter = code.HasValue ?
                new ObjectParameter("code", code) :
                new ObjectParameter("code", typeof(long));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var guaranteeDateParameter = guaranteeDate.HasValue ?
                new ObjectParameter("guaranteeDate", guaranteeDate) :
                new ObjectParameter("guaranteeDate", typeof(System.DateTime));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("quantity", quantity) :
                new ObjectParameter("quantity", typeof(int));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("insertWare", codeParameter, nameParameter, guaranteeDateParameter, quantityParameter, typeParameter);
        }
    
        public virtual int realizeOrders(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("realizeOrders", idParameter);
        }
    
        public virtual ObjectResult<string> showMethodDelivery()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("showMethodDelivery");
        }
    
        public virtual ObjectResult<showOrders_Result> showOrders()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showOrders_Result>("showOrders");
        }
    
        public virtual ObjectResult<showProducts_Result> showProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<showProducts_Result>("showProducts");
        }
    
        public virtual ObjectResult<string> showProductTypes()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("showProductTypes");
        }
    }
}
